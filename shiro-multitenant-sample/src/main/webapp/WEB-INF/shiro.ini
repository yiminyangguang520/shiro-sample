#
# Copyright (c) 2012 Les Hazlewood
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

[main]

tenantManager = com.leshazlewood.samples.shiromt.tenant.DemoTenantManager

# Tenant Source retains the resolved tenant during request/thread execution
threadLocalTenantSource = com.leshazlewood.samples.shiromt.tenant.ThreadLocalTenantSource
systemFallbackTenantSource = com.leshazlewood.samples.shiromt.tenant.SystemFallbackTenantSource
systemFallbackTenantSource.tenantManager = $tenantManager
systemFallbackTenantSource.delegate = $threadLocalTenantSource
tenantSource = com.leshazlewood.samples.shiromt.tenant.RequiredTenantSource
tenantSource.delegate = $systemFallbackTenantSource

userRepository = com.leshazlewood.samples.shiromt.user.DemoUserRepository
userRepository.tenantSource = $tenantSource

#Tenant Resolvers know how to look at a request and determine which tenant is interacted with:
subdomainTenantResolver = com.leshazlewood.samples.shiromt.web.tenant.SubdomainTenantResolver
subdomainTenantResolver.tenantManager = $tenantManager
subdomainTenantResolver.baseDomain = foo.com
systemTenantResolver = com.leshazlewood.samples.shiromt.web.tenant.SystemTenantResolver
systemTenantResolver.tenantManager = $tenantManager
tenantResolver = com.leshazlewood.samples.shiromt.web.tenant.DelegatingTenantResolver
tenantResolver.tenantManager = $tenantManager
tenantResolver.tenantResolvers = $subdomainTenantResolver, $systemTenantResolver

# The TenantFilter resolves a tenant based on the incoming request (using the TenantResolver) and then
# applies that Tenant to the TenantSource so it is accessible to the rest of the system for the duration of the
# request (downstream components always use the TenantSource to determine what tenant to use when performing queries).
tenantFilter = com.leshazlewood.samples.shiromt.web.tenant.TenantFilter
tenantFilter.tenantResolver = $tenantResolver
tenantFilter.tenantSource = $tenantSource

# MemorySessionDAO suitable for testing only - don't use it in production:
sessionDAO = org.apache.shiro.session.mgt.eis.MemorySessionDAO
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager.sessionDAO = $sessionDAO
securityManager.sessionManager = $sessionManager
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

realm = com.leshazlewood.samples.shiromt.realm.UserRealm
realm.userRepository = $userRepository

securityManager.realms = $realm

# redefine the 'authc' filter to be tenant aware:
authc = com.leshazlewood.samples.shiromt.web.TenantFormAuthenticationFilter
authc.tenantManager = $tenantManager
authc.tenantSource = $tenantSource

authc.loginUrl = /login.jsp

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/logout = logout
/account/** = authc
/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]

